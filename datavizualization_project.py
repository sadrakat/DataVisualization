# -*- coding: utf-8 -*-
"""DataVizualization_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xjV8fgntvcLqD4QgdF5p79IHO8V98N0w
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
df=pd.read_csv('/content/Electric_Vehicle_Population_Data.csv')
df.head(10)

df.isnull().sum()

df.drop(df[(df['Model'].isna()) | (df['Model']==0.0)].index, inplace = True)

df.dropna(subset = ['Postal Code'], inplace = True)

df.drop(df[(df['Vehicle Location'].isna()) | (df['Model']==0.0)].index, inplace = True)

df['Model Year'] = pd.to_datetime(df['Model Year'], errors = 'coerce')

df.drop(df[(df['Legislative District'].isna()) | (df['Model']==0.0)].index, inplace = True)

df.isnull().sum()

df.shape

df.info()

df.describe()

import plotly.express as px

# Assuming 'County' and 'VIN' columns for vehicle counts
county_ev_counts = df['County'].value_counts().head(20)  # Top 20 counties for more data

# Create a DataFrame for Plotly
county_ev_df = county_ev_counts.reset_index()
county_ev_df.columns = ['County', 'Number of Electric Vehicles']

# Plot using Plotly
fig = px.bar(county_ev_df, x='County', y='Number of Electric Vehicles',
             title='Top 20 Counties with the Most Electric Vehicles',
             labels={'County': 'County', 'Number of Electric Vehicles': 'Number of Electric Vehicles'})
fig.show()

import plotly.express as px

# Assuming 'ev_data' is your DataFrame with 'Legislative District', 'VIN (1-10)', and 'Electric Vehicle Type' columns
# Group and count by legislative district and electric vehicle type
district_type_counts = df.groupby(['Legislative District', 'Electric Vehicle Type']).size().unstack(fill_value=0)

# Create a DataFrame for Plotly, converting the multi-index DataFrame back to a regular DataFrame
district_type_df = district_type_counts.reset_index()

# Plot using Plotly
fig = px.bar(district_type_df, x='Legislative District', y=district_type_df.columns[1:],
             title='Distribution of Electric Vehicle Types Across Legislative Districts by VIN Segments',
             labels={'value': 'Number of Vehicles', 'variable': 'Electric Vehicle Type'},
             template='plotly_white')

# Make the bars stacked
fig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})
fig.update_xaxes(title_text='Legislative District')
fig.update_yaxes(title_text='Number of Vehicles')
fig.show()

import plotly.express as px

# Assuming 'district_ev_counts' is already grouped and counted by 'Legislative District'
district_ev_counts = df.groupby('Legislative District').size()
district_ev_df = district_ev_counts.reset_index()
district_ev_df.columns = ['Legislative District', 'Number of Electric Vehicles']

# Create interactive line chart using Plotly
fig = px.line(district_ev_df, x='Legislative District', y='Number of Electric Vehicles',
              title='Electric Vehicles in Legislative Districts',
              markers=True,  # To add markers as in your Matplotlib code
              labels={'Legislative District': 'Legislative District', 'Number of Electric Vehicles': 'Number of Electric Vehicles'})

# Adding grid lines
fig.update_layout(xaxis=dict(showgrid=True), yaxis=dict(showgrid=True))

fig.show()

!pip install squarify

import matplotlib.pyplot as plt
import pandas as pd
import squarify  # This is the library for treemap
import numpy as np

# Assuming 'df' is your DataFrame and it contains a column 'Make'
# Count the occurrences of each 'Make' in the DataFrame
make_counts = df['Make'].value_counts()

# Focus only on the top 10 makes
top_10_makes = make_counts.head(25)

# Normalize these counts to get market share percentages
market_shares = top_10_makes / top_10_makes.sum() * 100

# Preparing labels for the treemap with percentage values
labels = [f"{make}\n{share:.1f}%" for make, share in market_shares.items()]

# Colors for the treemap blocks
colors = plt.cm.Spectral(np.linspace(0, 1, len(labels)))

# Plotting with increased plot size
plt.figure(figsize=(16, 16))  # Adjusted to a reasonable size for clarity
squarify.plot(sizes=market_shares, label=labels, color=colors, alpha=0.8)
plt.title('Market Share of Top 25 EV Producing Companies', fontsize=20)
plt.axis('off')  # Treemaps do not require axes
plt.show()